// 使用类扩展来存放私有属性
// 类扩展可以扩充类的属性和方法的声明
@interface ViewController ()

// 注释掉与控件连线的属性后, 未清理连线时报错:
// 'NSUnknownKeyException', reason: [<xxxController 0xnnnnnn> setValue:forUndefinedKey:]:this class is not key value coding-compliant for key xxx
// IBOutlet: 使之可以连线
@property(nonatomic, weak) IBOutlet UILabel *textLabel;

// 类扩展中方法的实现, 可以直接在原类文件.m中的@implementation中实现

@end


// 注意:
//      在StoryBoard中, 要注意controller与.m文件的关联
//      一个按钮可以绑定多个方法
//      拷贝某个组件时, 注意处理其已绑定的事件
//      删除某个方法后, 注意处理控件的关联问题

#pragma mark 监听红色按钮
// IBAction: 使之可以连线
- (IBAction)redClick {
NSLog(@"redClick");
// 设置文字内容
self.textLabel.text = @"我是红色文字";
// 设置文字颜色
self.textLabel.textColor = [UIColor redColor];
// 设置文字字体
self.textLabel.font = [UIFont systemFontOfSize: 20];
}

// 对启动时加载的StoryBoard, 要注意配置其intial view controller(箭头所指的控制器面板)

// IBOutlet:
//  让属性具备连线的功能

// IBAction:
//  本质就是void
//  能让方法具备连线的功能

// 被连接的属性被删除或注释, 而未处理连线问题时:
// 'NSUnknownKeyException', reason: [<xxxController 0xnnnnnn> setValue:forUndefinedKey:]:this class is not key value coding-compliant for key xxx

// 被连接的方法被删除或注释, 而未处理连线问题时:
// unrecognized selector sent to instance

// XXXController:
//  负责管理一个大界面, 负责界面的创建和事件处理
//  一个界面, 交给一个Controller

// 类扩展:
/*
    @interface 类名()
    // 属性&方法声明
    @end
*/
// 作用: 为某个类增加额外的属性和方法的声明, 可以放在.h和.m中
